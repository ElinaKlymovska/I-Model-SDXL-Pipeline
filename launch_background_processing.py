#!/usr/bin/env python3
"""
Background Processing Launcher
–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ–æ–Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ RunPod —Ç–∞ —Å–∫–∞—á—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
"""

import os
import sys
import time
import json
import tarfile
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any

# Project paths
PROJECT_ROOT = Path(__file__).parent
DATA_DIR = PROJECT_ROOT / "data"
INPUT_DIR = DATA_DIR / "input"
OUTPUTS_DIR = DATA_DIR / "outputs"

# SSH connection details (from config)
sys.path.append(str(PROJECT_ROOT))
from runpod.config import config

SSH_HOST = config.ssh_host
SSH_PORT = config.ssh_port
SSH_USER = "root"
SSH_KEY = "~/.ssh/id_ed25519"


class BackgroundProcessingLauncher:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ–æ–Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    
    def __init__(self):
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.local_session_dir = OUTPUTS_DIR / f"session_{self.session_id}"
        self.remote_session_dir = f"/workspace/data/outputs/session_{self.session_id}"
        self.processing_log = self.local_session_dir / "processing.log"
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –ø–∞–ø–∫–∏
        self.local_session_dir.mkdir(parents=True, exist_ok=True)
        OUTPUTS_DIR.mkdir(exist_ok=True)
        
        print(f"üéØ –ù–æ–≤–∞ —Å–µ—Å—ñ—è –æ–±—Ä–æ–±–∫–∏: {self.session_id}")
        print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω–∞ –ø–∞–ø–∫–∞: {self.local_session_dir}")

    def run_ssh_command(self, command: str, show_output: bool = True) -> tuple[bool, str, str]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ SSH"""
        ssh_cmd = f"ssh {SSH_USER}@{SSH_HOST} -p {SSH_PORT} -i {SSH_KEY} '{command}'"
        
        if show_output:
            print(f"üîß Executing: {command}")
        
        try:
            result = subprocess.run(ssh_cmd, shell=True, capture_output=True, text=True)
            
            if show_output and result.stdout:
                print(result.stdout)
            if result.stderr:
                print(f"‚ö†Ô∏è stderr: {result.stderr}")
                
            return result.returncode == 0, result.stdout, result.stderr
        except Exception as e:
            print(f"‚ùå SSH command failed: {e}")
            return False, "", str(e)

    def upload_file(self, local_path: str, remote_path: str) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ SCP"""
        scp_cmd = f"scp -P {SSH_PORT} -i {SSH_KEY} {local_path} {SSH_USER}@{SSH_HOST}:{remote_path}"
        
        print(f"üì§ Uploading {local_path} -> {remote_path}")
        
        try:
            result = subprocess.run(scp_cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Uploaded {local_path}")
                return True
            else:
                print(f"‚ùå Upload failed: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå Upload error: {e}")
            return False

    def download_directory(self, remote_path: str, local_path: str) -> bool:
        """–°–∫–∞—á–∞—Ç–∏ –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ SCP"""
        scp_cmd = f"scp -r -P {SSH_PORT} -i {SSH_KEY} {SSH_USER}@{SSH_HOST}:{remote_path} {local_path}"
        
        print(f"üì• Downloading {remote_path} -> {local_path}")
        
        try:
            result = subprocess.run(scp_cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Downloaded to {local_path}")
                return True
            else:
                print(f"‚ùå Download failed: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå Download error: {e}")
            return False

    def check_connection(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ SSH –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RunPod...")
        success, _, _ = self.run_ssh_command("echo 'Connection OK'", show_output=False)
        
        if success:
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
            return True
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ RunPod")
            print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π pod —Ç–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ SSH —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏")
            return False

    def upload_input_images(self) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ RunPod"""
        print("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
        
        if not INPUT_DIR.exists() or not list(INPUT_DIR.glob("*")):
            print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å —É {INPUT_DIR}")
            return False
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
        archive_path = f"input_images_{self.session_id}.tar.gz"
        
        with tarfile.open(archive_path, "w:gz") as tar:
            for image_file in INPUT_DIR.glob("*"):
                if image_file.is_file() and image_file.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp', '.bmp', '.tiff']:
                    tar.add(image_file, arcname=image_file.name)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤
        if not self.upload_file(archive_path, f"/workspace/{archive_path}"):
            return False
        
        # –†–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏ –Ω–∞ RunPod
        success, _, _ = self.run_ssh_command(f"cd /workspace && mkdir -p data/input && tar --no-same-owner -xzf {archive_path} -C data/input/")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π –∞—Ä—Ö—ñ–≤
        os.remove(archive_path)
        
        if success:
            print("‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            return True
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å")
            return False

    def upload_scripts(self) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∏ –Ω–∞ RunPod"""
        print("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤...")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–æ–º
        archive_path = f"myneuralkingdom_{self.session_id}.tar.gz"
        
        include_items = [
            "core/",
            "services/", 
            "pipelines/",
            "scripts/",
            "configs/",
            "runpod/",
            "*.py",
            "*.txt",
            "*.json"
        ]
        
        with tarfile.open(archive_path, "w:gz") as tar:
            for item in include_items:
                if "*" in item:
                    import glob
                    for file_path in glob.glob(item):
                        if os.path.isfile(file_path):
                            tar.add(file_path)
                else:
                    if os.path.exists(item):
                        tar.add(item)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ —Ä–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏
        if not self.upload_file(archive_path, f"/workspace/{archive_path}"):
            return False
        
        success, _, _ = self.run_ssh_command(f"cd /workspace && tar --no-same-owner -xzf {archive_path}")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π –∞—Ä—Ö—ñ–≤
        os.remove(archive_path)
        
        if success:
            print("‚úÖ –°–∫—Ä–∏–ø—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            return True
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤")
            return False

    def start_background_processing(self, model_name: str = "epicrealism_xl") -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ–Ω–æ–≤—É –æ–±—Ä–æ–±–∫—É –Ω–∞ RunPod"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ –∑ –º–æ–¥–µ–ª–ª—é: {model_name}")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        cmd = f"cd /workspace && nohup python scripts/background_image_processor.py --model {model_name} --session-id {self.session_id} > background_processing_{self.session_id}.log 2>&1 &"
        
        success, output, _ = self.run_ssh_command(cmd)
        
        if success:
            print("‚úÖ –§–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            print(f"üìã Session ID: {self.session_id}")
            print("üîç –î–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
            print(f"   ssh {SSH_USER}@{SSH_HOST} -p {SSH_PORT} -i {SSH_KEY}")
            print(f"   tail -f /workspace/background_processing_{self.session_id}.log")
            return True
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ñ–æ–Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏")
            return False

    def monitor_processing(self, timeout_minutes: int = 60) -> bool:
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ–±—Ä–æ–±–∫–∏"""
        print(f"üëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–±—Ä–æ–±–∫–∏ (–º–∞–∫—Å–∏–º—É–º {timeout_minutes} —Ö–≤–∏–ª–∏–Ω)...")
        
        start_time = time.time()
        timeout_seconds = timeout_minutes * 60
        
        while time.time() - start_time < timeout_seconds:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            success, output, _ = self.run_ssh_command(
                f"test -f {self.remote_session_dir}/processing_stats.json && echo 'EXISTS' || echo 'NOT_EXISTS'",
                show_output=False
            )
            
            if "EXISTS" in output:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –æ–±—Ä–æ–±–∫–∞
                success, stats_content, _ = self.run_ssh_command(
                    f"cat {self.remote_session_dir}/processing_stats.json",
                    show_output=False
                )
                
                if success and stats_content:
                    try:
                        stats = json.loads(stats_content)
                        if "end_time" in stats:
                            print("‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            return True
                        else:
                            processed = stats.get("processed_images", 0)
                            total = stats.get("total_images", 0)
                            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {processed}/{total} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
                    except json.JSONDecodeError:
                        pass
            
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è... (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É)")
            time.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É. –û–±—Ä–æ–±–∫–∞ –º–æ–∂–µ –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        return False

    def download_results(self) -> bool:
        """–°–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—Ä–æ–±–∫–∏"""
        print("üì• –°–∫–∞—á—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        success, _, _ = self.run_ssh_command(f"test -d {self.remote_session_dir} && echo 'OK'", show_output=False)
        
        if not success:
            print(f"‚ùå –ü–∞–ø–∫–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î: {self.remote_session_dir}")
            return False
        
        # –°–∫–∞—á–∞—Ç–∏ –ø–∞–ø–∫—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        parent_dir = self.local_session_dir.parent
        return self.download_directory(self.remote_session_dir, str(parent_dir))

    def show_results_summary(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        stats_file = self.local_session_dir / "processing_stats.json"
        report_file = self.local_session_dir / "processing_report.txt"
        
        print("\nüéØ –ü–Ü–î–°–£–ú–û–ö –û–ë–†–û–ë–ö–ò")
        print("=" * 40)
        
        if stats_file.exists():
            try:
                with open(stats_file, 'r', encoding='utf-8') as f:
                    stats = json.load(f)
                
                print(f"üìã Session ID: {stats['session_id']}")
                print(f"üìä –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {stats['total_images']}")
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed_images']}")
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {stats['failed_images']}")
                print(f"ü§ñ –ú–æ–¥–µ–ª—å: {stats['model_name']}")
                print(f"‚è∞ –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {stats.get('processing_time', 0):.1f} —Å–µ–∫—É–Ω–¥")
                print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {self.local_session_dir}")
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        if report_file.exists():
            print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: {report_file}")

    def cleanup_remote(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –Ω–∞ RunPod"""
        print("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
        
        cleanup_commands = [
            f"rm -f /workspace/*_{self.session_id}.tar.gz",
            f"rm -f /workspace/background_processing_{self.session_id}.log"
        ]
        
        for cmd in cleanup_commands:
            self.run_ssh_command(cmd, show_output=False)
        
        print("‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def run_full_processing(self, model_name: str = "epicrealism_xl", monitor: bool = True) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –§–û–ù–û–í–û–á –û–ë–†–û–ë–ö–ò –ó–û–ë–†–ê–ñ–ï–ù–¨")
        print("=" * 50)
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if not self.check_connection():
            return False
        
        # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫—Ä–∏–ø—Ç–∏
        if not self.upload_input_images():
            return False
        
        if not self.upload_scripts():
            return False
        
        # 3. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É
        if not self.start_background_processing(model_name):
            return False
        
        # 4. –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ (–æ–ø—Ü—ñ–π–Ω–æ)
        if monitor:
            self.monitor_processing()
        
        # 5. –°–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if not self.download_results():
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")
            print("–í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç–∏ —ó—Ö –ø—ñ–∑–Ω—ñ—à–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:")
            print(f"scp -r -P {SSH_PORT} -i {SSH_KEY} {SSH_USER}@{SSH_HOST}:{self.remote_session_dir} {OUTPUTS_DIR}/")
            return False
        
        # 6. –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫
        self.show_results_summary()
        
        # 7. –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        self.cleanup_remote()
        
        print("\nüéâ –§–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        return True


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Background Processing Launcher")
    parser.add_argument("--model", default="epicrealism_xl", help="Model name to use")
    parser.add_argument("--no-monitor", action="store_true", help="Don't monitor processing")
    parser.add_argument("--download-only", help="Only download results for specific session ID")
    
    args = parser.parse_args()
    
    if args.download_only:
        # –°–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó
        launcher = BackgroundProcessingLauncher()
        launcher.session_id = args.download_only
        launcher.local_session_dir = OUTPUTS_DIR / f"session_{args.download_only}"
        launcher.remote_session_dir = f"/workspace/data/outputs/session_{args.download_only}"
        launcher.local_session_dir.mkdir(parents=True, exist_ok=True)
        
        if launcher.download_results():
            launcher.show_results_summary()
            return 0
        else:
            return 1
    else:
        # –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏
        launcher = BackgroundProcessingLauncher()
        
        if launcher.run_full_processing(
            model_name=args.model,
            monitor=not args.no_monitor
        ):
            return 0
        else:
            return 1


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        print("–§–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –º–æ–∂–µ –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ RunPod")
        sys.exit(1)