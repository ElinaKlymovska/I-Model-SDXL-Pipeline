#!/usr/bin/env python3
"""
Processing Monitor
–®–≤–∏–¥–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ñ–æ–Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ –Ω–∞ RunPod
"""

import sys
import json
import time
import subprocess
from pathlib import Path

# Project paths
PROJECT_ROOT = Path(__file__).parent
sys.path.append(str(PROJECT_ROOT))
from runpod.config import config

SSH_HOST = config.ssh_host
SSH_PORT = config.ssh_port
SSH_USER = "root"
SSH_KEY = "~/.ssh/id_ed25519"


def run_ssh_command(command: str) -> tuple[bool, str, str]:
    """–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ SSH"""
    ssh_cmd = f"ssh {SSH_USER}@{SSH_HOST} -p {SSH_PORT} -i {SSH_KEY} '{command}'"
    
    try:
        result = subprocess.run(ssh_cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def list_active_sessions():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –æ–±—Ä–æ–±–∫–∏"""
    print("üîç –ü–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –æ–±—Ä–æ–±–∫–∏...")
    
    success, output, _ = run_ssh_command("ls -la /workspace/data/outputs/ 2>/dev/null | grep session_ || echo 'No sessions found'")
    
    if success and "session_" in output:
        print("üìã –ó–Ω–∞–π–¥–µ–Ω—ñ —Å–µ—Å—ñ—ó:")
        for line in output.strip().split('\n'):
            if "session_" in line:
                parts = line.split()
                if len(parts) >= 9:
                    session_name = parts[-1]
                    print(f"  ‚Ä¢ {session_name}")
    else:
        print("‚ùå –ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")


def monitor_session(session_id: str):
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å–µ—Å—ñ—é"""
    print(f"üëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—ñ—ó: {session_id}")
    print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É")
    print("-" * 50)
    
    remote_session_dir = f"/workspace/data/outputs/session_{session_id}"
    stats_file = f"{remote_session_dir}/processing_stats.json"
    log_file = f"/workspace/background_processing_{session_id}.log"
    
    try:
        while True:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            success, stats_content, _ = run_ssh_command(f"cat {stats_file} 2>/dev/null || echo '{{}}'")
            
            if success and stats_content.strip():
                try:
                    stats = json.loads(stats_content)
                    
                    total = stats.get("total_images", 0)
                    processed = stats.get("processed_images", 0)
                    failed = stats.get("failed_images", 0)
                    model = stats.get("model_name", "Unknown")
                    
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {processed}/{total} –∑–æ–±—Ä–∞–∂–µ–Ω—å | –ü–æ–º–∏–ª–∫–∏: {failed} | –ú–æ–¥–µ–ª—å: {model}")
                    
                    if "end_time" in stats:
                        processing_time = stats.get("processing_time", 0)
                        print(f"‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.1f} —Å–µ–∫—É–Ω–¥")
                        
                        # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ –ª–æ–≥—É
                        success, log_content, _ = run_ssh_command(f"tail -n 10 {log_file} 2>/dev/null || echo 'No log available'")
                        if success and log_content.strip():
                            print("\nüìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –ª–æ–≥—É:")
                            print(log_content)
                        
                        break
                        
                except json.JSONDecodeError:
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏...")
            
            time.sleep(10)  # –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
            
    except KeyboardInterrupt:
        print("\n\nüëã –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")


def show_session_details(session_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é"""
    print(f"üìã –î–µ—Ç–∞–ª—ñ —Å–µ—Å—ñ—ó: {session_id}")
    print("-" * 40)
    
    remote_session_dir = f"/workspace/data/outputs/session_{session_id}"
    stats_file = f"{remote_session_dir}/processing_stats.json"
    report_file = f"{remote_session_dir}/processing_report.txt"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success, stats_content, _ = run_ssh_command(f"cat {stats_file} 2>/dev/null")
    if success and stats_content.strip():
        try:
            stats = json.loads(stats_content)
            
            print(f"üéØ Session ID: {stats['session_id']}")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {stats.get('model_name', 'Unknown')}")
            print(f"üìä –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {stats.get('total_images', 0)}")
            print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats.get('processed_images', 0)}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {stats.get('failed_images', 0)}")
            
            if "start_time" in stats:
                print(f"üïê –ü–æ—á–∞—Ç–æ–∫: {stats['start_time']}")
            if "end_time" in stats:
                print(f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {stats['end_time']}")
                print(f"‚è∞ –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {stats.get('processing_time', 0):.1f} —Å–µ–∫—É–Ω–¥")
            else:
                print("‚è≥ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—ñ")
                
        except json.JSONDecodeError:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    else:
        print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ó–≤—ñ—Ç
    success, report_content, _ = run_ssh_command(f"cat {report_file} 2>/dev/null")
    if success and report_content.strip():
        print(f"\nüìã –ó–≤—ñ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π ({len(report_content)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        print("–ü–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤:")
        print("-" * 30)
        print(report_content[:500])
        if len(report_content) > 500:
            print("...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    success, files_content, _ = run_ssh_command(f"find {remote_session_dir} -name '*.jpg' -o -name '*.png' -o -name '*.webp' 2>/dev/null | wc -l")
    if success and files_content.strip():
        file_count = files_content.strip()
        print(f"\nüñºÔ∏è –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {file_count}")


def show_logs(session_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ —Å–µ—Å—ñ—ó"""
    log_file = f"/workspace/background_processing_{session_id}.log"
    
    print(f"üìã –õ–æ–≥–∏ —Å–µ—Å—ñ—ó: {session_id}")
    print("-" * 40)
    
    success, log_content, _ = run_ssh_command(f"tail -n 50 {log_file} 2>/dev/null || echo 'Log file not found'")
    
    if success and log_content.strip():
        print(log_content)
    else:
        print("‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Processing Monitor")
    parser.add_argument("--list", action="store_true", help="List active sessions")
    parser.add_argument("--monitor", help="Monitor specific session")
    parser.add_argument("--details", help="Show session details")
    parser.add_argument("--logs", help="Show session logs")
    parser.add_argument("--ssh", action="store_true", help="Open SSH connection")
    
    args = parser.parse_args()
    
    if args.ssh:
        print("üîó –í—ñ–¥–∫—Ä–∏—Ç—Ç—è SSH –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
        os.system(f"ssh {SSH_USER}@{SSH_HOST} -p {SSH_PORT} -i {SSH_KEY}")
    elif args.list:
        list_active_sessions()
    elif args.monitor:
        monitor_session(args.monitor)
    elif args.details:
        show_session_details(args.details)
    elif args.logs:
        show_logs(args.logs)
    else:
        print("üñ•Ô∏è Processing Monitor")
        print("=" * 30)
        print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
        print("  --list                     –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó")
        print("  --monitor <session_id>     –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é")
        print("  --details <session_id>     –î–µ—Ç–∞–ª—ñ —Å–µ—Å—ñ—ó")
        print("  --logs <session_id>        –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏")
        print("  --ssh                      –í—ñ–¥–∫—Ä–∏—Ç–∏ SSH –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
        print()
        print("–ü—Ä–∏–∫–ª–∞–¥:")
        print("  python monitor_processing.py --list")
        print("  python monitor_processing.py --monitor 20241201_143022")


if __name__ == "__main__":
    import os
    main()