#!/usr/bin/env python3
"""
RunPod Quick Test Script
–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –≤ —Ö–º–∞—Ä–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ RunPod
"""

import sys
import time
import logging
from pathlib import Path
from PIL import Image
import torch

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ RunPod"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ RunPod...")
    
    # Check CUDA
    if torch.cuda.is_available():
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1e9
        print(f"‚úÖ GPU: {gpu_name} ({gpu_memory:.1f}GB VRAM)")
    else:
        print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return False
    
    # Check paths
    workspace = Path("/workspace")
    volume = Path("/runpod-volume")
    
    if workspace.exists():
        print(f"‚úÖ Workspace: {workspace}")
    else:
        print(f"‚ùå Workspace –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {workspace}")
        
    if volume.exists():
        print(f"‚úÖ Volume: {volume}")
    else:
        print(f"‚ùå Volume –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {volume}")
    
    return True

def test_pipeline():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ pipeline"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Image Enhancement Pipeline...")
    
    try:
        # Add workspace to path
        sys.path.append("/workspace")
        
        from core.config import get_config_manager
        from core.container import create_default_container
        from pipelines.inference.enhanced_image_pipeline import EnhancedImagePipeline
        
        # Initialize pipeline
        config_manager = get_config_manager()
        container = create_default_container()
        pipeline = EnhancedImagePipeline(config_manager, container)
        
        # Setup
        if not pipeline.setup():
            print("‚ùå Pipeline setup failed")
            return False
        
        print("‚úÖ Pipeline —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # Check models
        available_models = config_manager.list_available_models()
        print(f"üìö –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {', '.join(available_models)}")
        
        # Check status
        status = pipeline.get_pipeline_status()
        print(f"üîß Face detection: {status['face_detection']['current_detector']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Pipeline —Ç–µ—Å—Ç failed: {e}")
        return False

def test_model_loading():
    """–¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
    print("\n‚¨áÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    
    try:
        sys.path.append("/workspace")
        from pipelines.inference.enhanced_image_pipeline import EnhancedImagePipeline
        from core.config import get_config_manager
        from core.container import create_default_container
        
        pipeline = EnhancedImagePipeline(get_config_manager(), create_default_container())
        pipeline.setup()
        
        # Try to load fastest model
        model_name = "realvis_xl_lightning"
        print(f"üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {model_name}...")
        
        start_time = time.time()
        if pipeline.load_model(model_name):
            load_time = time.time() - start_time
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑–∞ {load_time:.1f}s")
            
            # Check memory usage
            if torch.cuda.is_available():
                memory_used = torch.cuda.memory_allocated(0) / 1e9
                print(f"üìä GPU memory –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {memory_used:.1f}GB")
            
            return True
        else:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {model_name}")
            return False
            
    except Exception as e:
        print(f"‚ùå Model loading —Ç–µ—Å—Ç failed: {e}")
        return False

def test_enhancement():
    """–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    print("\nüñºÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
    
    try:
        sys.path.append("/workspace")
        from pipelines.inference.enhanced_image_pipeline import EnhancedImagePipeline
        from core.config import get_config_manager
        from core.container import create_default_container
        
        pipeline = EnhancedImagePipeline(get_config_manager(), create_default_container())
        pipeline.setup()
        
        # Load model
        model_name = "realvis_xl_lightning"
        if not pipeline.load_model(model_name):
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å")
            return False
        
        # Create test image
        test_image = Image.new("RGB", (512, 512), color=(100, 150, 200))
        
        # Test enhancement with minimal settings
        print("üé® –ó–∞–ø—É—Å–∫ —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É...")
        start_time = time.time()
        
        results = pipeline.run(
            input_data=test_image,
            model_name=model_name,
            enhancement_config={
                "strength": 0.1,
                "num_inference_steps": 4,  # Very fast test
                "guidance_scale": 6.0
            },
            output_dir="/runpod-volume/outputs/test"
        )
        
        process_time = time.time() - start_time
        
        if results["status"] == "success":
            print(f"‚úÖ –¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∏–π –∑–∞ {process_time:.1f}s")
            metadata = results["metadata"]
            print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {metadata['total_images']} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
            print(f"üë§ –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏—á: {metadata['total_faces_detected']}")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è failed: {results.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Enhancement —Ç–µ—Å—Ç failed: {e}")
        return False

def create_sample_images():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    print("\nüì∏ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
    
    output_dir = Path("/runpod-volume/data")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Create test images
    colors = [
        ("red_test.jpg", (255, 100, 100)),
        ("green_test.jpg", (100, 255, 100)),
        ("blue_test.jpg", (100, 100, 255))
    ]
    
    for filename, color in colors:
        image = Image.new("RGB", (512, 512), color=color)
        image_path = output_dir / filename
        image.save(image_path)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {image_path}")
    
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {output_dir}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ RunPod MyNeuralKingdom - –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç")
    print("=" * 50)
    
    tests = [
        ("Environment Check", test_environment),
        ("Pipeline Initialization", test_pipeline),
        ("Model Loading", test_model_loading),
        ("Enhancement Test", test_enhancement)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            success = test_func()
            results[test_name] = success
            status = "‚úÖ PASSED" if success else "‚ùå FAILED"
            print(f"\n{status}: {test_name}")
        except Exception as e:
            print(f"\n‚ùå FAILED: {test_name} - {e}")
            results[test_name] = False
    
    # Create sample images regardless of test results
    create_sample_images()
    
    # Summary
    print(f"\n{'='*20} SUMMARY {'='*20}")
    passed = sum(results.values())
    total = len(results)
    
    print(f"–¢–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    for test_name, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}")
    
    if passed == total:
        print(f"\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! MyNeuralKingdom –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –≤ RunPod!")
        print(f"üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ /runpod-volume/data/ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è!")
    else:
        print(f"\n‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)