#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π batch –ø—Ä–æ—Ü–µ—Å–æ—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–æ—Ç–æ, –æ–±—Ä–æ–±–ª—è—î –∑ ADetailer + SDXL, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞—á—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
"""

import os
import sys
import json
import yaml
import asyncio
import argparse
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional
import shutil
from concurrent.futures import ThreadPoolExecutor
import time
from datetime import datetime

# –î–æ–¥–∞–º–æ —à–ª—è—Ö –¥–æ scripts –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from run_adetailer import run_adetailer
    from run_img2img import run_img2img
except ImportError as e:
    logging.error(f"Failed to import pipeline modules: {e}")
    sys.exit(1)

# Set up logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('batch_processing.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class AutoBatchProcessor:
    def __init__(self, config_path: str = "config/batch_config.yaml"):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞"""
        self.config_path = config_path
        self.config = self.load_config()
        self.prompt_settings = self.load_prompt_settings()
        self.results = []
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        self.setup_directories()
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é batch –æ–±—Ä–æ–±–∫–∏"""
        default_config = {
            "input_dir": "assets/input",
            "output_dir": "assets/output",
            "temp_dir": "assets/temp",
            "download_dir": "assets/downloads",
            "supported_formats": [".jpg", ".jpeg", ".png", ".webp", ".bmp"],
            "default_model": "epicrealism_xl",
            "default_preset": "professional_headshot",
            "default_enhancement": "medium",
            "max_workers": 2,  # –î–ª—è A40 –º–æ–∂–Ω–∞ 2-3 –æ–¥–Ω–æ—á–∞—Å–Ω–æ
            "auto_cleanup": True,
            "generate_metadata": True
        }
        
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    user_config = yaml.safe_load(f)
                default_config.update(user_config)
            except Exception as e:
                logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
                
        return default_config
    
    def load_prompt_settings(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        try:
            with open("config/prompt_settings.yaml", 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è prompt_settings.yaml: {e}")
            return {}
    
    def setup_directories(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
        dirs = [
            self.config["input_dir"],
            self.config["output_dir"], 
            self.config["temp_dir"],
            self.config["download_dir"]
        ]
        
        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)
            logging.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≥–æ—Ç–æ–≤–∞: {dir_path}")
    
    def find_input_images(self, input_path: str) -> List[str]:
        """–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏"""
        images = []
        supported_exts = self.config["supported_formats"]
        
        if os.path.isfile(input_path):
            if any(input_path.lower().endswith(ext) for ext in supported_exts):
                images.append(input_path)
        elif os.path.isdir(input_path):
            for ext in supported_exts:
                images.extend(Path(input_path).glob(f"*{ext}"))
                images.extend(Path(input_path).glob(f"*{ext.upper()}"))
            images = [str(img) for img in images]
        
        logging.info(f"üñºÔ∏è  –ó–Ω–∞–π–¥–µ–Ω–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        return images
    
    def get_processing_params(self, preset: str, model: str, enhancement: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±—Ä–æ–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ preset"""
        params = {
            "model": model,
            "preset": preset,
            "enhancement": enhancement
        }
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ prompt –∑ preset
        if preset in self.prompt_settings.get("presets", {}):
            preset_config = self.prompt_settings["presets"][preset]
            params["positive_prompt"] = preset_config.get("positive", "")
            params["negative_prompt"] = preset_config.get("negative", "")
            params["enhancement_level"] = preset_config.get("enhancement_level", enhancement)
        else:
            # –ë–∞–∑–æ–≤—ñ –ø—Ä–æ–º–ø—Ç–∏
            params["positive_prompt"] = self.prompt_settings.get("default_prompts", {}).get("base_positive", "")
            params["negative_prompt"] = self.prompt_settings.get("default_prompts", {}).get("base_negative", "")
        
        # –î–æ–¥–∞—Ç–∏ model-specific –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if model in self.prompt_settings.get("model_specific", {}):
            model_config = self.prompt_settings["model_specific"][model]
            params["positive_prompt"] += model_config.get("positive_suffix", "")
            params["negative_prompt"] += model_config.get("negative_suffix", "")
            params["cfg_scale"] = model_config.get("recommended_cfg", 7)
            params["steps"] = model_config.get("recommended_steps", 30)
        
        # –î–æ–¥–∞—Ç–∏ enhancement level –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if enhancement in self.prompt_settings.get("enhancement_levels", {}):
            enh_config = self.prompt_settings["enhancement_levels"][enhancement]
            params["denoising_strength"] = enh_config.get("denoising_strength", 0.4)
            params["cfg_scale"] = enh_config.get("cfg_scale", 7)
            params["steps"] = enh_config.get("steps", 30)
        
        return params
    
    def process_single_image(self, image_path: str, params: Dict[str, Any], 
                           output_suffix: str = "") -> Dict[str, Any]:
        """–û–±—Ä–æ–±–∏—Ç–∏ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        start_time = time.time()
        image_name = Path(image_path).stem
        
        # –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—ñ–≤
        temp_path = os.path.join(self.config["temp_dir"], f"{image_name}_adetailer{output_suffix}.png")
        output_path = os.path.join(self.config["output_dir"], f"{image_name}_enhanced{output_suffix}.png")
        
        result = {
            "input_path": image_path,
            "output_path": output_path,
            "temp_path": temp_path,
            "success": False,
            "error": None,
            "processing_time": 0,
            "params": params,
            "timestamp": datetime.now().isoformat()
        }
        
        try:
            logging.info(f"üé® –û–±—Ä–æ–±–∫–∞: {image_name}")
            
            # Step 1: ADetailer
            logging.info(f"  üß† –ö—Ä–æ–∫ 1: ADetailer –¥–ª—è {image_name}")
            run_adetailer(image_path, temp_path, params["model"])
            
            if not os.path.exists(temp_path):
                raise RuntimeError("ADetailer –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            # Step 2: SDXL img2img
            logging.info(f"  üé® –ö—Ä–æ–∫ 2: SDXL img2img –¥–ª—è {image_name}")
            run_img2img(
                temp_path, 
                output_path, 
                params["positive_prompt"], 
                params["negative_prompt"], 
                params["model"]
            )
            
            if not os.path.exists(output_path):
                raise RuntimeError("SDXL img2img –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ temp —Ñ–∞–π–ª
            if self.config["auto_cleanup"] and os.path.exists(temp_path):
                os.remove(temp_path)
            
            result["success"] = True
            result["processing_time"] = time.time() - start_time
            
            logging.info(f"‚úÖ {image_name} –æ–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞ {result['processing_time']:.1f}—Å")
            
        except Exception as e:
            result["error"] = str(e)
            result["processing_time"] = time.time() - start_time
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {image_name}: {e}")
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            for path in [temp_path, output_path]:
                if os.path.exists(path):
                    os.remove(path)
        
        return result
    
    def batch_process(self, input_path: str, preset: str = None, 
                     model: str = None, enhancement: str = None,
                     max_workers: int = None) -> List[Dict[str, Any]]:
        """Batch –æ–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        preset = preset or self.config["default_preset"]
        model = model or self.config["default_model"]
        enhancement = enhancement or self.config["default_enhancement"]
        max_workers = max_workers or self.config["max_workers"]
        
        # –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        images = self.find_input_images(input_path)
        
        if not images:
            logging.warning("–ñ–æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return []
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±—Ä–æ–±–∫–∏
        params = self.get_processing_params(preset, model, enhancement)
        
        logging.info(f"üöÄ –ü–æ—á–∞—Ç—É batch –æ–±—Ä–æ–±–∫—É {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        logging.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {preset}/{model}/{enhancement}")
        
        # –û–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        results = []
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_image = {
                executor.submit(self.process_single_image, img, params, f"_{i:03d}"): img
                for i, img in enumerate(images)
            }
            
            for future in future_to_image:
                result = future.result()
                results.append(result)
                self.results.append(result)
        
        # –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç
        successful = sum(1 for r in results if r["success"])
        failed = len(results) - successful
        
        logging.info(f"üìä Batch –æ–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful} —É—Å–ø—ñ—à–Ω–æ, {failed} –ø–æ–º–∏–ª–æ–∫")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ
        if self.config["generate_metadata"]:
            self.save_metadata(results, preset, model, enhancement)
        
        return results
    
    def save_metadata(self, results: List[Dict[str, Any]], preset: str, 
                     model: str, enhancement: str):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –æ–±—Ä–æ–±–∫–∏"""
        metadata = {
            "batch_id": datetime.now().strftime("%Y%m%d_%H%M%S"),
            "preset": preset,
            "model": model,
            "enhancement": enhancement,
            "total_images": len(results),
            "successful": sum(1 for r in results if r["success"]),
            "failed": sum(1 for r in results if not r["success"]),
            "total_time": sum(r["processing_time"] for r in results),
            "results": results
        }
        
        metadata_path = os.path.join(self.config["output_dir"], f"batch_metadata_{metadata['batch_id']}.json")
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        logging.info(f"üìÑ –ú–µ—Ç–∞–¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {metadata_path}")
    
    def create_download_package(self, results: List[Dict[str, Any]], 
                               package_name: str = None) -> str:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–∫–µ—Ç –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è"""
        if not package_name:
            package_name = f"enhanced_photos_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        package_dir = os.path.join(self.config["download_dir"], package_name)
        os.makedirs(package_dir, exist_ok=True)
        
        # –ö–æ–ø—ñ—é–≤–∞—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        copied = 0
        for result in results:
            if result["success"] and os.path.exists(result["output_path"]):
                dest_path = os.path.join(package_dir, os.path.basename(result["output_path"]))
                shutil.copy2(result["output_path"], dest_path)
                copied += 1
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤
        archive_path = f"{package_dir}.zip"
        shutil.make_archive(package_dir.rstrip('.zip'), 'zip', package_dir)
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        shutil.rmtree(package_dir)
        
        logging.info(f"üì¶ –ü–∞–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {archive_path} ({copied} —Ñ–∞–π–ª—ñ–≤)")
        return archive_path

def main():
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π batch –ø—Ä–æ—Ü–µ—Å–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π")
    
    parser.add_argument("input", help="–®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏")
    parser.add_argument("--preset", default=None, help="Preset –¥–ª—è –æ–±—Ä–æ–±–∫–∏ (professional_headshot, artistic_portrait, etc.)")
    parser.add_argument("--model", default=None, help="SDXL –º–æ–¥–µ–ª—å (epicrealism_xl, realvisxl_v5_lightning, etc.)")
    parser.add_argument("--enhancement", default=None, help="–†—ñ–≤–µ–Ω—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (light, medium, strong, extreme)")
    parser.add_argument("--workers", type=int, default=None, help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤")
    parser.add_argument("--package", action="store_true", help="–°—Ç–≤–æ—Ä–∏—Ç–∏ ZIP –ø–∞–∫–µ—Ç –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è")
    parser.add_argument("--config", default="config/batch_config.yaml", help="–®–ª—è—Ö –¥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É")
    
    args = parser.parse_args()
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å–æ—Ä
    processor = AutoBatchProcessor(args.config)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ batch –æ–±—Ä–æ–±–∫—É
    results = processor.batch_process(
        args.input,
        preset=args.preset,
        model=args.model,
        enhancement=args.enhancement,
        max_workers=args.workers
    )
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–∫–µ—Ç –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è
    if args.package and results:
        processor.create_download_package(results)
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫
    successful = sum(1 for r in results if r["success"])
    print(f"\nüéâ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{len(results)} —É—Å–ø—ñ—à–Ω–æ")
    
    if successful > 0:
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤: {processor.config['output_dir']}")
        if args.package:
            print(f"üì¶ ZIP –ø–∞–∫–µ—Ç –≤: {processor.config['download_dir']}")

if __name__ == "__main__":
    main()