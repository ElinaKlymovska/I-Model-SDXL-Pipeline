#!/usr/bin/env python3
"""
Background Image Processor for RunPod
–ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ RunPod —ñ –æ–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
"""

import os
import sys
import json
import time
import logging
import traceback
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from pipelines.inference.image_enhancement import ImageEnhancementPipeline

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/background_processing.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class BackgroundImageProcessor:
    """–§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å–æ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è RunPod"""
    
    def __init__(self, session_id: str = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞
        
        Args:
            session_id: –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å–µ—Å—ñ—ó
        """
        self.session_id = session_id or datetime.now().strftime("%Y%m%d_%H%M%S")
        self.pipeline = None
        self.start_time = time.time()
        
        # –®–ª—è—Ö–∏
        self.input_dir = Path("/workspace/data/input")
        self.base_output_dir = Path("/workspace/data/outputs")
        self.session_output_dir = self.base_output_dir / f"session_{self.session_id}"
        
        # –°—Ç–≤–æ—Ä–∏–º–æ –ø–∞–ø–∫–∏
        self.session_output_dir.mkdir(parents=True, exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "session_id": self.session_id,
            "start_time": datetime.now().isoformat(),
            "total_images": 0,
            "processed_images": 0,
            "failed_images": 0,
            "processing_time": 0,
            "model_name": None,
            "results": []
        }
        
        logger.info(f"üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ BackgroundImageProcessor –¥–ª—è —Å–µ—Å—ñ—ó: {self.session_id}")
        logger.info(f"üìÅ –í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞: {self.session_output_dir}")

    def find_input_images(self) -> List[Path]:
        """–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏"""
        image_extensions = ['.jpg', '.jpeg', '.png', '.webp', '.bmp', '.tiff']
        images = []
        
        if not self.input_dir.exists():
            logger.warning(f"‚ùå –ü–∞–ø–∫–∞ –∑ –≤—Ö—ñ–¥–Ω–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –Ω–µ —ñ—Å–Ω—É—î: {self.input_dir}")
            return images
        
        for ext in image_extensions:
            images.extend(self.input_dir.glob(f"*{ext}"))
            images.extend(self.input_dir.glob(f"*{ext.upper()}"))
        
        logger.info(f"üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
        return sorted(images)

    def setup_pipeline(self, model_name: str = "epicrealism_xl") -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ pipeline –¥–ª—è –æ–±—Ä–æ–±–∫–∏"""
        try:
            logger.info("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è pipeline...")
            
            self.pipeline = ImageEnhancementPipeline()
            
            if not self.pipeline.setup():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ pipeline")
                return False
            
            logger.info(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {model_name}")
            if not self.pipeline.load_model(model_name):
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å: {model_name}")
                return False
            
            self.stats["model_name"] = model_name
            logger.info("‚úÖ Pipeline —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è pipeline: {e}")
            logger.error(traceback.format_exc())
            return False

    def process_single_image(self, image_path: Path, index: int, total: int) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–∏—Ç–∏ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        result = {
            "input_path": str(image_path),
            "output_path": None,
            "status": "failed",
            "error": None,
            "processing_time": 0,
            "timestamp": datetime.now().isoformat()
        }
        
        start_time = time.time()
        
        try:
            logger.info(f"üñºÔ∏è –û–±—Ä–æ–±–∫–∞ [{index+1}/{total}]: {image_path.name}")
            
            # –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            output_subdir = self.session_output_dir / f"image_{index+1:02d}_{image_path.stem}"
            output_subdir.mkdir(exist_ok=True)
            
            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
            enhancement_config = {
                "strength": 0.3,
                "guidance_scale": 7.0,
                "num_inference_steps": 20,
                "face_enhancement_strength": 0.4
            }
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–∫–∏
            processing_result = self.pipeline.run(
                input_data=str(image_path),
                model_name=self.stats["model_name"],
                enhancement_config=enhancement_config,
                output_dir=str(output_subdir)
            )
            
            if processing_result["status"] == "success":
                result["status"] = "success"
                result["output_path"] = str(output_subdir)
                result["enhanced_images"] = processing_result.get("enhanced_images", [])
                self.stats["processed_images"] += 1
                logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {image_path.name}")
            else:
                result["error"] = processing_result.get("error", "Unknown error")
                self.stats["failed_images"] += 1
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {image_path.name}: {result['error']}")
                
        except Exception as e:
            result["error"] = str(e)
            self.stats["failed_images"] += 1
            logger.error(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {image_path.name}: {e}")
            logger.error(traceback.format_exc())
        
        result["processing_time"] = time.time() - start_time
        return result

    def process_all_images(self, model_name: str = "epicrealism_xl") -> Dict[str, Any]:
        """–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ–Ω–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        # –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        images = self.find_input_images()
        if not images:
            return {"status": "error", "message": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏"}
        
        self.stats["total_images"] = len(images)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ pipeline
        if not self.setup_pipeline(model_name):
            return {"status": "error", "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ pipeline"}
        
        # –û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–∂–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        for i, image_path in enumerate(images):
            result = self.process_single_image(image_path, i, len(images))
            self.stats["results"].append(result)
            
            # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.save_stats()
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats["end_time"] = datetime.now().isoformat()
        self.stats["processing_time"] = time.time() - self.start_time
        self.save_stats()
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ pipeline
        if self.pipeline:
            self.pipeline.cleanup()
        
        logger.info(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É! –£—Å–ø—ñ—à–Ω–æ: {self.stats['processed_images']}, –ü–æ–º–∏–ª–∫–∏: {self.stats['failed_images']}")
        
        return {
            "status": "success",
            "session_id": self.session_id,
            "stats": self.stats,
            "output_dir": str(self.session_output_dir)
        }

    def save_stats(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats_file = self.session_output_dir / "processing_stats.json"
        try:
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def create_summary_report(self) -> str:
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç"""
        report = f"""
üéØ –ó–í–Ü–¢ –ü–†–û –û–ë–†–û–ë–ö–£ –ó–û–ë–†–ê–ñ–ï–ù–¨
Session ID: {self.session_id}
================================

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å—å–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {self.stats['total_images']}
‚Ä¢ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {self.stats['processed_images']}
‚Ä¢ –ü–æ–º–∏–ª–∫–∏: {self.stats['failed_images']}
‚Ä¢ –ú–æ–¥–µ–ª—å: {self.stats['model_name']}
‚Ä¢ –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {self.stats.get('processing_time', 0):.1f} —Å–µ–∫—É–Ω–¥

üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {self.session_output_dir}

üñºÔ∏è –î–µ—Ç–∞–ª—ñ –æ–±—Ä–æ–±–∫–∏:
"""
        
        for i, result in enumerate(self.stats['results'], 1):
            status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
            report += f"{status_icon} {i:2d}. {Path(result['input_path']).name} ({result['processing_time']:.1f}s)\n"
            if result['error']:
                report += f"     –ü–æ–º–∏–ª–∫–∞: {result['error']}\n"
        
        return report


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Background Image Processor")
    parser.add_argument("--model", default="epicrealism_xl", help="Model name to use")
    parser.add_argument("--session-id", help="Custom session ID")
    args = parser.parse_args()
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å–æ—Ä
    processor = BackgroundImageProcessor(session_id=args.session_id)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É
    result = processor.process_all_images(model_name=args.model)
    
    if result["status"] == "success":
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç
        report = processor.create_summary_report()
        logger.info(report)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç —É —Ñ–∞–π–ª
        report_file = processor.session_output_dir / "processing_report.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüéâ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {processor.session_output_dir}")
        print(f"üìã Session ID: {processor.session_id}")
        
        return 0
    else:
        logger.error(f"‚ùå –û–±—Ä–æ–±–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {result.get('message')}")
        return 1


if __name__ == "__main__":
    sys.exit(main())