#!/usr/bin/env python3
"""
–í–µ–± API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
–î–æ–∑–≤–æ–ª—è—î –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞ —Å–∫–∞—á—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
"""

import os
import sys
import json
import uuid
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional

from flask import Flask, request, jsonify, send_file, render_template_string
from werkzeug.utils import secure_filename
import threading
import queue

# –î–æ–¥–∞–º–æ —à–ª—è—Ö –¥–æ scripts
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from auto_batch_processor import AutoBatchProcessor

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
processor = AutoBatchProcessor()
job_queue = queue.Queue()
active_jobs = {}
completed_jobs = {}

def background_worker():
    """–§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω—å"""
    while True:
        try:
            job = job_queue.get(timeout=1)
            if job is None:  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
                break
                
            job_id = job['job_id']
            active_jobs[job_id]['status'] = 'processing'
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É
            results = processor.batch_process(
                job['input_path'],
                preset=job.get('preset'),
                model=job.get('model'), 
                enhancement=job.get('enhancement'),
                max_workers=job.get('workers', 1)
            )
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–∫–µ—Ç –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è
            package_path = processor.create_download_package(results, f"job_{job_id}")
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
            active_jobs[job_id]['status'] = 'completed'
            active_jobs[job_id]['results'] = results
            active_jobs[job_id]['package_path'] = package_path
            active_jobs[job_id]['completed_at'] = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤ completed
            completed_jobs[job_id] = active_jobs.pop(job_id)
            
        except queue.Empty:
            continue
        except Exception as e:
            if job_id in active_jobs:
                active_jobs[job_id]['status'] = 'failed'
                active_jobs[job_id]['error'] = str(e)
                completed_jobs[job_id] = active_jobs.pop(job_id)

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å
worker_thread = threading.Thread(target=background_worker, daemon=True)
worker_thread.start()

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>I, Model - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .upload-area { border: 2px dashed #ccc; padding: 20px; text-align: center; margin: 20px 0; }
            .upload-area:hover { border-color: #999; }
            .form-group { margin: 10px 0; }
            label { display: block; margin-bottom: 5px; font-weight: bold; }
            select, input, button { padding: 8px; margin: 5px; }
            button { background: #007cba; color: white; border: none; cursor: pointer; }
            button:hover { background: #005a87; }
            .job-status { margin: 20px 0; padding: 10px; border-radius: 5px; }
            .processing { background: #fff3cd; }
            .completed { background: #d4edda; }
            .failed { background: #f8d7da; }
        </style>
    </head>
    <body>
        <h1>üé® I, Model - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π</h1>
        
        <form id="uploadForm" enctype="multipart/form-data">
            <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                <p>üìÅ –ö–ª—ñ–∫–Ω—ñ—Ç—å –∞–±–æ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</p>
                <input type="file" id="fileInput" name="files" multiple accept="image/*" style="display: none;">
            </div>
            
            <div class="form-group">
                <label>–°—Ç–∏–ª—å –æ–±—Ä–æ–±–∫–∏:</label>
                <select name="preset">
                    <option value="professional_headshot">–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç</option>
                    <option value="artistic_portrait">–ê—Ä—Ç–∏—Å—Ç–∏—á–Ω–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç</option>
                    <option value="natural_candid">–ü—Ä–∏—Ä–æ–¥–Ω—ñ–π —Å—Ç–∏–ª—å</option>
                    <option value="glamour_portrait">–ì–ª–∞–º—É—Ä–Ω–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç</option>
                </select>
            </div>
            
            <div class="form-group">
                <label>–ú–æ–¥–µ–ª—å SDXL:</label>
                <select name="model">
                    <option value="epicrealism_xl">EpiCRealism XL</option>
                    <option value="realvisxl_v5_lightning">RealVisXL Lightning</option>
                    <option value="juggernaut_xl_v9">Juggernaut XL v9</option>
                </select>
            </div>
            
            <div class="form-group">
                <label>–†—ñ–≤–µ–Ω—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:</label>
                <select name="enhancement">
                    <option value="light">–õ–µ–≥–∫–∏–π</option>
                    <option value="medium" selected>–°–µ—Ä–µ–¥–Ω—ñ–π</option>
                    <option value="strong">–°–∏–ª—å–Ω–∏–π</option>
                    <option value="extreme">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π</option>
                </select>
            </div>
            
            <button type="submit">üöÄ –ü–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É</button>
        </form>
        
        <div id="jobStatus"></div>
        
        <script>
            document.getElementById('uploadForm').onsubmit = async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                try {
                    const response = await fetch('/upload', { method: 'POST', body: formData });
                    const result = await response.json();
                    
                    if (result.success) {
                        pollJobStatus(result.job_id);
                    } else {
                        alert('–ü–æ–º–∏–ª–∫–∞: ' + result.error);
                    }
                } catch (error) {
                    alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ' + error);
                }
            };
            
            async function pollJobStatus(jobId) {
                const statusDiv = document.getElementById('jobStatus');
                
                while (true) {
                    try {
                        const response = await fetch(`/job/${jobId}`);
                        const job = await response.json();
                        
                        statusDiv.innerHTML = `
                            <div class="job-status ${job.status}">
                                <h3>–ó–∞–≤–¥–∞–Ω–Ω—è ${jobId}</h3>
                                <p>–°—Ç–∞—Ç—É—Å: ${getStatusText(job.status)}</p>
                                ${job.progress ? `<p>–ü—Ä–æ–≥—Ä–µ—Å: ${job.progress}</p>` : ''}
                                ${job.status === 'completed' ? 
                                    `<p><a href="/download/${jobId}">üì¶ –°–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏</a></p>` : ''}
                                ${job.error ? `<p>–ü–æ–º–∏–ª–∫–∞: ${job.error}</p>` : ''}
                            </div>
                        `;
                        
                        if (job.status === 'completed' || job.status === 'failed') {
                            break;
                        }
                        
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    } catch (error) {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
                        break;
                    }
                }
            }
            
            function getStatusText(status) {
                const texts = {
                    'queued': '–í —á–µ—Ä–∑—ñ',
                    'processing': '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...',
                    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ',
                    'failed': '–ü–æ–º–∏–ª–∫–∞ ‚ùå'
                };
                return texts[status] || status;
            }
        </script>
    </body>
    </html>
    """
    return html

@app.route('/upload', methods=['POST'])
def upload_files():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏ —Ç–∞ –ø–æ—á–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É"""
    try:
        if 'files' not in request.files:
            return jsonify({'success': False, 'error': '–§–∞–π–ª–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ'})
        
        files = request.files.getlist('files')
        if not files or files[0].filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ'})
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π job ID
        job_id = str(uuid.uuid4())[:8]
        job_dir = os.path.join(processor.config['input_dir'], f'job_{job_id}')
        os.makedirs(job_dir, exist_ok=True)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª–∏
        saved_files = []
        for file in files:
            if file.filename:
                filename = secure_filename(file.filename)
                filepath = os.path.join(job_dir, filename)
                file.save(filepath)
                saved_files.append(filepath)
        
        if not saved_files:
            return jsonify({'success': False, 'error': '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª–∏'})
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
        job = {
            'job_id': job_id,
            'input_path': job_dir,
            'preset': request.form.get('preset', 'professional_headshot'),
            'model': request.form.get('model', 'epicrealism_xl'),
            'enhancement': request.form.get('enhancement', 'medium'),
            'workers': 1,  # –î–ª—è –≤–µ–± API –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 1 worker
            'created_at': datetime.now().isoformat(),
            'files_count': len(saved_files)
        }
        
        # –î–æ–¥–∞—Ç–∏ –≤ —á–µ—Ä–≥—É
        active_jobs[job_id] = {
            'status': 'queued',
            'created_at': job['created_at'],
            'files_count': job['files_count'],
            'params': {k: v for k, v in job.items() if k not in ['job_id', 'input_path']}
        }
        
        job_queue.put(job)
        
        return jsonify({
            'success': True,
            'job_id': job_id,
            'files_count': len(saved_files),
            'message': f'–ó–∞–≤–¥–∞–Ω–Ω—è {job_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ. –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è {len(saved_files)} —Ñ–∞–π–ª—ñ–≤.'
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/job/<job_id>')
def get_job_status(job_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è"""
    if job_id in active_jobs:
        return jsonify(active_jobs[job_id])
    elif job_id in completed_jobs:
        job = completed_jobs[job_id].copy()
        # –ù–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –≤–µ–ª–∏–∫—ñ –¥–∞–Ω—ñ
        if 'results' in job:
            job['results_count'] = len(job['results'])
            job['successful_count'] = sum(1 for r in job['results'] if r['success'])
            del job['results']
        return jsonify(job)
    else:
        return jsonify({'error': '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404

@app.route('/download/<job_id>')
def download_results(job_id):
    """–°–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"""
    if job_id not in completed_jobs:
        return jsonify({'error': '–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}), 404
    
    job = completed_jobs[job_id]
    if 'package_path' not in job or not os.path.exists(job['package_path']):
        return jsonify({'error': '–ü–∞–∫–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
    
    return send_file(
        job['package_path'],
        as_attachment=True,
        download_name=f'enhanced_photos_{job_id}.zip'
    )

@app.route('/jobs')
def list_jobs():
    """–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å"""
    all_jobs = {}
    all_jobs.update(active_jobs)
    all_jobs.update(completed_jobs)
    
    return jsonify(all_jobs)

if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ Web API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π")
    print("üì± –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ: http://localhost:5000")
    print("üéØ API endpoints:")
    print("  - POST /upload - –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ")
    print("  - GET /job/<id> - —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è") 
    print("  - GET /download/<id> - —Å–∫–∞—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
    
    app.run(host='0.0.0.0', port=5000, debug=True)